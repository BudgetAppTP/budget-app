from abc import ABC, abstractmethod
from typing import List, Optional, Dict, Iterable
from decimal import Decimal
from app.core.domain import Transaction, MonthlyBudget, Goal, User, Section, TransactionKind
from app.core.dto import TransactionFilter


class TransactionsRepository(ABC):
    @abstractmethod
    def all(self) -> List[Transaction]: ...
    @abstractmethod
    def query(self, flt: TransactionFilter) -> List[Transaction]: ...
    @abstractmethod
    def add(self, tx: Transaction) -> None: ...
    @abstractmethod
    def categories(self) -> Iterable[str]: ...
    @abstractmethod
    def totals_by_section(self, month: str) -> Dict[Section, Decimal]: ...
    @abstractmethod
    def totals_by_category(self, month: str, kind: Optional[TransactionKind] = None) -> Dict[str, Decimal]: ...


class BudgetsRepository(ABC):
    @abstractmethod
    def by_month(self, month: str) -> List[MonthlyBudget]: ...
    @abstractmethod
    def upsert(self, mb: MonthlyBudget) -> None: ...
    @abstractmethod
    def sections(self) -> List[Section]: ...


class GoalsRepository(ABC):
    @abstractmethod
    def all(self) -> List[Goal]: ...
    @abstractmethod
    def upsert(self, g: Goal) -> None: ...
    @abstractmethod
    def by_section(self, section: Optional[Section]) -> List[Goal]: ...


class UsersRepository(ABC):
    @abstractmethod
    def get_by_email(self, email: str) -> Optional[User]: ...
    @abstractmethod
    def add(self, user: User) -> None: ...
